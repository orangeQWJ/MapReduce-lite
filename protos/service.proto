syntax = "proto3";

package master;

// 找到一个rpc服务
message ServerAddress {
  string ip = 1;
  int32 port = 2;
}

// 从哪一个服务中获取哪个文件
message FilePath {
  ServerAddress serverAddress = 1;
  string path = 2;
}

// 定义文件内容块结构体
message FileChunk {
  bytes content = 1;  // 每次返回的数据块
}

// 定义任务类型枚举
enum TaskType {
  MAP = 0;  // Map 任务
  REDUCE = 1;  // Reduce 任务
}

// 定义 Worker 注册请求结构体
message RegisterWorkerRequest {
	ServerAddress server_add = 1;
}

// 定义 Worker 注册响应
message RegisterWorkerResponse {
	bool success = 1;  // 注册是否成功
}

// 定义任务汇报请求结构体
message ReportTaskRequest {
	string jobID = 1;
	TaskType taskType = 2;           // 任务类型
	int32 taskID = 3;                // 任务编号
	repeated FilePath filePaths = 4; // 任务涉及的文件路径列表
}

// 定义任务汇报响应
message ReportTaskResponse {
	bool success = 1;  // 汇报是否成功
}

// 定义上传任务的请求
message UploadTaskRequest {
	int32 mapNum = 1;
	int32 reduceNum = 2;
	ServerAddress serverAddress = 3;
	FilePath mapReduceFuncPath = 4;
	repeated FilePath filePaths = 5;
}

// 定义上传任务的响应
message UploadTaskResponse {
	string jobID = 1;
	bool success = 2;
}

// 定义 MasterService 服务
service MasterService {
// client -> master, 提交一个总的计算任务
rpc UploadTask (UploadTaskRequest) returns (UploadTaskResponse);

// worker -> master, worker向master注册
rpc RegisterWorker (RegisterWorkerRequest) returns (RegisterWorkerResponse);

// worker -> master, 完成m/r Task后汇报
rpc ReportTaskCompletion (ReportTaskRequest) returns (ReportTaskResponse);
}


// 定义读取文件请求结构体
message ReadFileRequest {
	FilePath filePath = 1;  // 要读取的文件路径
}

// 定义任务完成汇报请求结构体
message ReportCompletionRequest {
	string jobID = 1;
	repeated FilePath filePaths = 2;
}

// 定义任务完成汇报响应结构体
message ReportCompletionResponse {
	bool success = 1;
}


service ClientService {
	// worker -> client, worker从client获取文件，执行Map Task
	rpc ReadFile(ReadFileRequest) returns (stream FileChunk);
	// master -> client, master 向client汇报，整个任务都完成了
	// 并告知client去哪里拉取分散在worker节点中，Reduce任务的产物
	rpc ReportCompletion(ReportCompletionRequest) returns (ReportCompletionResponse);
}


message JustDoItRequest {
	string jobID = 1;
	TaskType taskType = 2;           // 任务类型
	int32 taskID = 3;                // 任务编号
	FilePath mapReduceFuncPath= 4;
	repeated FilePath filePaths = 5; // 任务涉及的文件路径列表
}

message JustDoItResponse {
	bool success = 1;  // 注册是否成功
}

service WorkerService {
	// 读取大文件服务，使用流式 RPC 传输数据
	// worker->worker, client->worker
	rpc ReadFile(ReadFileRequest) returns (stream FileChunk);
	// master->worker, master 下发m/r task
	rpc JustDoIt(JustDoItRequest) returns (JustDoItResponse);
}
